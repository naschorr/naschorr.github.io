@use "variables";
@use "mixins";
@use "sass:color";

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
    color-scheme: dark;
    overflow-x: hidden;
}

html {
    color: variables.$dark-text-color;
    font: 1.15rem variables.$font-family, arial, sans-serif;
    min-height: 100vh;
    width: 100vw;
}

img, .skeleton {
    border-radius: variables.$border-radius;
}

// Router Animations

@keyframes enter {
    0% {
        transform: translateY(100vh);
    }

    100% {
        transform: translateY(0);
    }
}

@keyframes exit {
    0% {
        transform: translateY(0);
    }

    100% {
        transform: translateY(-100vh);
    }
}

::view-transition-old(root) {
    animation: exit 0.1s ease 0s 1 normal forwards;
}

::view-transition-new(root) {
    animation: enter 0.1s ease 0s 1 normal forwards;
}


// Convenience Overrides

@for $i from 1 through 3 {
    h#{$i} {
        font-size: 2.5rem - $i * 0.5rem;
        font-weight: 600;
    }
}

a[routerLink] {
    cursor: pointer;
}

@media screen and (prefers-reduced-motion: reduce) {
    // Thanks to: https://css-tricks.com/revisiting-prefers-reduced-motion-the-reduced-motion-media-query/
    * {
        /* Very short durations means JavaScript that relies on events still works */
        animation-duration: 0.001ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.001ms !important;
    }
}

// Styling

@supports (background-clip: text) {
    .clip-text {
        -moz-background-clip: text;
        -webkit-background-clip: text;
        background-clip: text !important;   // linear-gradient overrides this with background-clip: border-box
        color: transparent;
    }
}

.color-feature {
    color: variables.$feature-color;
}
.color-dark {
    color: variables.$dark-color;
}
.color-medium {
    color: variables.$medium-color;
}
.color-light {
    color: variables.$light-color;
}

.bg-color-feature {
    background-color: variables.$feature-color;
}
.bg-color-dark {
    background-color: variables.$dark-color;
}
.bg-color-medium {
    background-color: variables.$medium-color;
}
.bg-color-light {
    background-color: variables.$light-color;
}

.bg-gradient-feature {
    @include mixins.bg-gradient(variables.$feature-color, variables.$feature-gradient-color);
}
.bg-gradient-feature-short {
    @include mixins.bg-gradient(variables.$feature-color, variables.$feature-gradient-short-color);
}
.bg-gradient-dark {
    @include mixins.bg-gradient(variables.$dark-color, variables.$dark-gradient-color);
}
.bg-gradient-medium {
    @include mixins.bg-gradient(variables.$medium-color, variables.$medium-gradient-color);
}
.bg-gradient-light {
    @include mixins.bg-gradient(variables.$light-color, variables.$light-color);
}

.maskable {
    height: 100%;
    width: 100%;
    mask-size: 100%;
}
.github-mask {
    mask-image: url("assets/images/icons/github.png");
}
.github-filled-mask {
    mask-image: url("assets/images/icons/github-filled.png");
}
.flask-mask {
    mask-image: url("assets/images/icons/flask.png");
}
.flask-filled-mask {
    mask-image: url("assets/images/icons/flask-filled.png");
}
.printer-mask {
    mask-image: url("assets/images/icons/3d-printer.png");
}
.printer-filled-mask {
    mask-image: url("assets/images/icons/3d-printer-filled.png");
}

.horizontal-rule {
    width: 100%;
    height: 0.1rem;
    border-radius: 0.05rem;
}

ul {
    list-style: none;
}
ul li::before {
    content: "‚óè";
    color: variables.$feature-color;
    font-size: 0.7rem;
    display: inline-block;
    width: 0.75rem;
    vertical-align: top;
    margin-top: 0.25em;
}

.nav-container {
    position: relative;
    height: 1.5rem;
    width: 1.5rem;
}
.nav-container .nav-item {
    transition: opacity variables.$animation-duration-fast ease-in-out;
}
.nav-container .nav-item:not(.hoverable) {
    opacity: 1;
}
.nav-container .nav-item:not(.hoverable):hover,
.nav-container .nav-item:not(.hoverable).active {
    opacity: 0;
}
.nav-container .nav-item.hoverable {
    position: absolute;
    top: 0;
    opacity: 0;
}
.nav-container .nav-item.hoverable:hover,
.nav-container .nav-item.hoverable.active{
    opacity: 1;
}

.skeleton {
    background-color: variables.$medium-color;
    background-image: linear-gradient(90deg, variables.$medium-color-filter 0px, variables.$medium-color 40px, variables.$medium-color-filter 80px);
    background-size: 100%;
    animation: skeleton 1.5s ease-in-out infinite;
}

.skeleton {
    // handle opacity here, otherwise the whole element will be transparent
    background: repeating-linear-gradient(
        -45deg,
        color.adjust(variables.$medium-color, $alpha:-0.85),
        color.adjust(variables.$medium-color, $alpha:-0.85) 2.5%,
        color.adjust(variables.$medium-color, $alpha:-0.5) 22.5%,
        color.adjust(variables.$medium-color, $alpha:-0.5) 27.5%,
        color.adjust(variables.$medium-color, $alpha:-0.85) 47.5%,
        color.adjust(variables.$medium-color, $alpha:-0.85) 50%
    );
    background-size: 200% 200%;

    -webkit-animation: skeleton 5s ease-in-out infinite;
    -moz-animation: skeleton 5s ease-in-out infinite;
    animation: skeleton 5s ease-in-out infinite;

    box-shadow: 0 0 0 0.1rem variables.$medium-color inset;
}

@-webkit-keyframes skeleton {
    0%{background-position: 0% 50%}
    50%{background-position: 100% 50%}
    100%{background-position: 0% 50%}
}
@-moz-keyframes skeleton {
    0%{background-position: 0% 50%}
    50%{background-position: 100% 50%}
    100%{background-position: 0% 50%}
}
@keyframes skeleton {
    0%{background-position: 0% 50%}
    50%{background-position: 100% 50%}
    100%{background-position: 0% 50%}
}