@use "variables";
@use "mixins";
@use "sass:color";

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
    color-scheme: dark;
    overflow-x: hidden;
}

html {
    color: variables.$dark-text-color;
    font: 1.15rem variables.$font-family, arial, sans-serif;
    min-height: 100vh;
    width: 100vw;
    line-height: 1.4;
}

p {
    margin-bottom: 0.375rem;    // mb-1.5
}

img, .skeleton {
    border-radius: variables.$border-radius;
}

// Router Animations

@keyframes enter {
    0% {
        transform: translateY(100vh);
    }

    100% {
        transform: translateY(0);
    }
}

@keyframes exit {
    0% {
        transform: translateY(0);
    }

    100% {
        transform: translateY(-100vh);
    }
}

::view-transition-old(root) {
    animation: exit 0.1s ease 0s 1 normal forwards;
}

::view-transition-new(root) {
    animation: enter 0.1s ease 0s 1 normal forwards;
}


// Convenience Overrides

@for $i from 1 through 3 {
    h#{$i} {
        font-size: 2.5rem - $i * 0.5rem;
        font-weight: 600;
    }
}

a[routerLink] {
    cursor: pointer;
}

@media screen and (prefers-reduced-motion: reduce) {
    // Thanks to: https://css-tricks.com/revisiting-prefers-reduced-motion-the-reduced-motion-media-query/
    * {
        /* Very short durations means JavaScript that relies on events still works */
        animation-duration: 0.001ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.001ms !important;
    }
}

// Styling

@supports (background-clip: text) {
    .clip-text {
        -moz-background-clip: text;
        -webkit-background-clip: text;
        background-clip: text !important;   // linear-gradient overrides this with background-clip: border-box
        color: transparent;
    }
}

.color-feature {
    color: variables.$feature-color;
}
.color-dark {
    color: variables.$dark-color;
}
.color-medium {
    color: variables.$medium-color;
}
.color-light {
    color: variables.$light-color;
}

.bg-color-feature {
    background-color: variables.$feature-color;
}
.bg-color-dark {
    background-color: variables.$dark-color;
}
.bg-color-medium {
    background-color: variables.$medium-color;
}
.bg-color-light {
    background-color: variables.$light-color;
}

.bg-gradient-feature {
    @include mixins.bg-gradient(variables.$feature-color, variables.$feature-gradient-color);
}
.bg-gradient-feature-short {
    @include mixins.bg-gradient(variables.$feature-color, variables.$feature-gradient-short-color);
}
.bg-gradient-dark {
    @include mixins.bg-gradient(variables.$dark-color, variables.$dark-gradient-color);
}
.bg-gradient-medium {
    @include mixins.bg-gradient(variables.$medium-color, variables.$medium-gradient-color);
}
.bg-gradient-light {
    @include mixins.bg-gradient(variables.$light-color, variables.$light-gradient-color);
}

.filter-light-color {
    filter: variables.$light-color-filter;
}
.filter-dark-color {
    filter: variables.$dark-color-filter;
}

.maskable {
    height: 100%;
    width: 100%;
    mask-size: 100%;
}
.github-mask {
    mask-image: url("../assets/images/icons/github.png");
}
.github-filled-mask {
    mask-image: url("../assets/images/icons/github-filled.png");
}
.flask-mask {
    mask-image: url("../assets/images/icons/flask.png");
}
.flask-filled-mask {
    mask-image: url("../assets/images/icons/flask-filled.png");
}
.printer-mask {
    mask-image: url("../assets/images/icons/3d-printer.png");
}
.printer-filled-mask {
    mask-image: url("../assets/images/icons/3d-printer-filled.png");
}

.horizontal-rule {
    width: 100%;
    height: 0.1rem;
    border-radius: 0.05rem;
}

ul {
    list-style: none;
}
ul li::before {
    content: "‚óè";
    color: variables.$feature-color;
    font-size: 0.7rem;
    display: inline-block;
    width: 0.75rem;
    vertical-align: top;
    margin-top: 0.25em;
}

.nav-container {
    position: relative;
    height: 1.5rem;
    width: 1.5rem;
}
.nav-container .nav-item {
    transition: opacity variables.$animation-duration-fast ease-in-out;
}
.nav-container .nav-item:not(.hoverable) {
    opacity: 1;
}
.nav-container .nav-item:not(.hoverable):hover,
.nav-container .nav-item:not(.hoverable).active {
    opacity: 0;
}
.nav-container .nav-item.hoverable {
    position: absolute;
    top: 0;
    opacity: 0;
}
.nav-container .nav-item.hoverable:hover,
.nav-container .nav-item.hoverable.active{
    opacity: 1;
}

.button {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    border-radius: variables.$border-radius;
    padding: 0.5rem 1rem;
    cursor: pointer;
}

.panel {
    background-color: variables.$panel-background-color;
    border-radius: variables.$border-radius;
    padding: variables.$project-panel-padding;
    transition: background-color variables.$animation-duration-fast ease-in-out;
}

.skeleton {
    // handle opacity here, otherwise the whole element will be transparent
    background: repeating-linear-gradient(
        -45deg,
        color.adjust(variables.$medium-color, $alpha:-0.85),
        color.adjust(variables.$medium-color, $alpha:-0.85) 2.5%,
        color.adjust(variables.$medium-color, $alpha:-0.5) 22.5%,
        color.adjust(variables.$medium-color, $alpha:-0.5) 27.5%,
        color.adjust(variables.$medium-color, $alpha:-0.85) 47.5%,
        color.adjust(variables.$medium-color, $alpha:-0.85) 50%
    );
    background-size: 200% 200%;

    animation: skeleton 5s ease-in-out infinite;

    box-shadow: 0 0 0 0.1rem color.adjust(variables.$medium-color, $alpha:-0.85) inset;
    border-radius: variables.$border-radius * 2;
}
@keyframes skeleton {
    0% { background-position: 0% 50% }
    50% { background-position: 100% 50% }
    100% { background-position: 0% 50% }
}

@media (pointer: fine) {
    /*
        This is a massive hack to work around the fact that clip-text doesn't play nice with text-decoration. Basically,
        we need to make our own underline and leverage ::after psuedoelements and their border-bottom.
    */
    .underline-feature-gradient {
        position: relative;
        white-space: nowrap;
    }

    .underline-feature-gradient:after {
        content: "";
        position: absolute;
        bottom: 3px;
        left: 0;
        width: 100%;

        border-image-source: linear-gradient(90deg, variables.$feature-color, variables.$feature-gradient-short-color);
        border-left: 0;
        border-right: 0;
        border-top: 0;
        border-width: 1px;
        border-image-slice: 1;

        opacity: 0;
        transition: opacity variables.$animation-duration-fast ease-in-out;
    }

    .underline-feature-gradient:hover:after {
        opacity: 1;
    }

    h1 .underline-feature-gradient:after {
        border-width: 3px;
    }
    h2 .underline-feature-gradient:after {
        border-width: 2px;
    }
}

.pseudo-border {
    // Displays a feature gradient (short) border away from the element this class is applied to on hover

    position: relative; // The pseudo element needs to be absolutely positioned relative to this element
    z-index: 1; // New stacking context, so the psuedo element's z-index can be lowered

    &::after {
        // Make sure it can show up
        content: "";

        // Expand the element to beyond the size of the contained element
        position: absolute;
        top: -(variables.$psuedo-border-distance);
        left: -(variables.$psuedo-border-distance);
        right: -(variables.$psuedo-border-distance);
        bottom: -(variables.$psuedo-border-distance);
        padding: variables.$psuedo-border-distance;
        z-index: -1;

        // Perform a frame clip, so we only see the outer stripe (thanks: https://bennettfeely.com/clippy/)
        clip-path: polygon(
            0% 0%,
            0% 100%,
            variables.$psuedo-border-radius 100%,
            variables.$psuedo-border-radius variables.$psuedo-border-radius,
            calc(100% - variables.$psuedo-border-radius) variables.$psuedo-border-radius,
            calc(100% - variables.$psuedo-border-radius) calc(100% - variables.$psuedo-border-radius),
            variables.$psuedo-border-radius calc(100% - variables.$psuedo-border-radius),
            variables.$psuedo-border-radius 100%,
            100% 100%,
            100% 0%
        );

        // Hide it by default (and set a consistent transition)
        opacity: 0;
        transition: variables.$transition-all-fast;

        // Color it and make it visually consistent
        @extend .bg-gradient-feature-short;
        border-radius: variables.$border-radius;
    }

    &:hover::after {
        opacity: 1;
    }
}
